#!/usr/bin/env ruby
require "rubygems"
require 'net/http'
require 'json'
require "poolparty/lite"

vote_for = ARGV.shift || "none" # or pending or terminated
schema = ::PoolParty.load_cloud_from_json(ARGV.shift)  #TODO: smarter option parser
remote_base_name = schema.options.remote_base.split('::')[-1].camelcase
remoter_base = PoolParty::Remote.module_eval(remote_base_name)

case vote_for
when "expand"
  # PoolParty.log << "Launching new instance"
  remoter_base.send :launch_instance!, schema.options do |node|
    require "poolparty/provision/boot_strapper"
    require "poolparty/provision/dr_configure"
    require "#{::File.dirname(__FILE__)}/../vendor/gems/suitcase/lib/suitcase"
    require "poolparty/poolparty/key"
    require "ostruct"
    
    cld = schema.to_cloud(node)
    
    ::PoolParty::Provision::BootStrapper.new( node[:ip], :cloud => cld )
    ::PoolParty::Provision::DrConfigure.new( node[:ip], :cloud => cld )
  end
when "contract"
  last_instance_id = %x[/usr/bin/server-list-active instance_id].split("\t").last
  remoter_base.terminate_instance! schema.options.merge(:instance_id => last_instance_id)
else
  puts "Unknown action: #{vote_for}"
end
  
