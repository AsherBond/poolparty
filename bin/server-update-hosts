#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "poolparty"
require "poolpartycl"

o = PoolParty::Optioner.new(ARGV) do |opts, optioner|
  opts.on('-n name', '--name name', 'Update hosts for local pool named [name]')    { |p| optioner.poolname p }
end

o.loaded_pools.each do |pool|  
  with_pool(pool) do
    puts "Pool: #{name}"
    pool_clouds.each do |cl|
      
      vputs "Cloud: #{cl.name}"
      
      new_hosts_listing = returning Array.new do |arr|
        
        puts cl.list_of_running_instances
        
        cl.list_of_running_instances.each do |ri|
          vputs ri.hosts_file_listing_for(cl)
          arr << ri.hosts_file_listing_for(cl)
        end
        cl.other_clouds.each do |other|
          other.list_of_running_instances.each do |ri|
            vputs ri.hosts_file_listing_for(cl)
            arr << ri.hosts_file_listing_for(cl)
          end
        end
      end.join("\n")
      
      puts new_hosts_listing
      
      if testing
        puts new_hosts_listing
      else
        new_hosts_file = "#{Base.manifest_path}/classes/hosts.pp"
        
        arr = returning Array.new do |arr|
          new_hosts_listing.split(/\n/).each do |line|
            parts = line.split(/\t/).map {|a| a.chomp }
            ip,hostname,aliases = parts[0], parts[1], parts[2..-1]
            puts "ip: #{ip} for #{hostname}"
            arr << PoolParty::Resources::Host.new(:ip => ip, :name => Resolv::DNS.new.getaddress(hostname), :alias => aliases).to_string
          end
        end
        
        ::File.open(new_hosts_file, "w+") {|f| f << arr.join("\n") }
      end
      
    end
    
  end
end