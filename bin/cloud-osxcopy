# #!/usr/bin/env ruby
# $:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
# require "poolparty"
# require "poolpartycl"
# 
# o = PoolParty::Optioner.new(ARGV) do |opts, optioner|
#   opts.on('-n name', '--name name', 'Copy an ip from this cloud to the clipboard')    { |c| optioner.cloudname c }
# end
# 
# o.loaded_clouds.each do |cld|
#   
#   node = cld.nodes(:status => "running").first
#   ip = node.ip
#   puts "ip: #{ip}"
#   Kernel.system "echo #{ip} | pbcopy"
#   
# end

#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + "/../lib")
require "poolparty"
# require "poolpartycl"
require 'git-style-binary/command'

GitStyleBinary.command do  
  version "PoolParty cloud command"  
  banner <<-EOS
Usage: #{$0} #{all_options_string} COMMAND [ARGS]

  List the clouds and their nodes
EOS

  short_desc "List the clouds"

  run do |command|    
    @loaded_clouds.each do |cld|
      
      puts header("Listing cloud #{cld.name}")
      puts subheader("Active instances")
      puts cld.nodes(:status => "running").map{|a| "#{a[:instance_id]}\t#{a[:ip]}" }.join("\n")

      if cld.nodes(:status => "pending").size > 0
        puts subheader("Pending instances")
        puts cld.nodes(:status => "pending").map{|a| "#{a[:instance_id]}\t#{a[:ip]}" }.join("\n")
      end
      
    end    
  end
end