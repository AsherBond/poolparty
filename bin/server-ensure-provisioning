#!/usr/bin/env ruby
require "rubygems"
require 'net/http'
require 'json'
require "poolparty/lite"

vote_for = ARGV.shift || "none" # or pending or terminated
schema = ::PoolParty.load_cloud_from_json(ARGV.shift)  #TODO: smarter option parser
remote_base_name = schema.options.remote_base.split('::')[-1].camelcase
remoter_base = PoolParty::Remote.module_eval(remote_base_name)

remoter_base.send(:describe_instances, schema.options).each do |node|
  require "ostruct"
  require "poolparty/provision/boot_strapper"
  require "poolparty/provision/dr_configure"
  require "#{::File.dirname(__FILE__)}/../vendor/gems/suitcase/lib/suitcase"
  require "poolparty/poolparty/key"

  unless node[:ip] == "not.assigned"
    cld = schema.to_cloud(node)
    
    ::PoolParty::Provision::BootStrapper.new( node[:ip], :cloud => cld )
    ::PoolParty::Provision::DrConfigure.new( node[:ip], :cloud => cld )
  end
  
end