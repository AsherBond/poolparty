#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "poolparty"
require "poolpartycl"
o = PoolParty::Optioner.new(ARGV) do |opts, optioner|
  opts.on('-n name', '--name name', 'Listing for cloud name')    { |c| optioner.cloudname c }
end
load_pool(o.spec || Binary.get_existing_spec_location)

@location = o.location ? o.location : "remote"

include Remote

@clouds = o.cloudname ? [cloud(o.cloudname.downcase.to_sym)] : clouds

@clouds.each do |name, cloud|

  with_cloud(cloud, {:location => @location, :testing => o.testing, :verbose => o.verbose}) do
    vputs header("Load handling cloud #{name}")
    if should_expand_cloud?
      vputs "Expanding cloud based on load"
      logger.debug "Expanding cloud based on load"
      logger.debug rules_values
      expand_cloud_if_necessary
    elsif should_contract_cloud?
      vputs "Contracting cloud based on load"
      logger.debug rules_values
      contract_cloud_if_necessary
    end
  end

end