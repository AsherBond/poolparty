#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "poolparty"
require "poolpartycl"
o = PoolParty::Optioner.new(ARGV) do |opts, optioner|  
  opts.on('-p poolname', '--pool name', 'Start pool by this name')    { |p| optioner.poolname p }
end

load_pool(o.spec || Binary.get_existing_spec_location)

@testing = o.testing

include Remote

if o.poolname
  @pool = pool(o.poolname.downcase.to_sym)
else
  puts "Pool name required. Please specify it with -c name"
  exit(0)
end

with_pool(@pool, {:testing => @testing}) do
  puts header("Starting pool")
  clouds.each do |name, cloud|
    puts subheader("Cloud: #{name}")
    puts "#{cloud.list_of_running_instances.size} running instances (#{cloud.minimum_instances} - #{cloud.maximum_instances})"
    if (cloud.minimum_instances - cloud.list_of_running_instances.size) > 0
      puts "Starting #{cloud.minimum_instances - cloud.list_of_running_instances.size} instances (from #{cloud.keypair})"
      testing ? puts("\tNot launching while in testing mode") : cloud.launch_minimum_number_of_instances
    end
  end
end